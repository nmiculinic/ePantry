// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// FoodDiary represents a row from 'public.food_diary'.
type FoodDiary struct {
	ID       int            `json:"id"`        // id
	RecipeID sql.NullInt64  `json:"recipe_id"` // recipe_id
	Time     pq.NullTime    `json:"time"`      // time
	Notes    sql.NullString `json:"notes"`     // notes

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FoodDiary exists in the database.
func (fd *FoodDiary) Exists() bool {
	return fd._exists
}

// Deleted provides information if the FoodDiary has been deleted from the database.
func (fd *FoodDiary) Deleted() bool {
	return fd._deleted
}

// Insert inserts the FoodDiary to the database.
func (fd *FoodDiary) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.food_diary (` +
		`recipe_id, time, notes` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fd.RecipeID, fd.Time, fd.Notes)
	err = db.QueryRow(sqlstr, fd.RecipeID, fd.Time, fd.Notes).Scan(&fd.ID)
	if err != nil {
		return err
	}

	// set existence
	fd._exists = true

	return nil
}

// Update updates the FoodDiary in the database.
func (fd *FoodDiary) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.food_diary SET (` +
		`recipe_id, time, notes` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, fd.RecipeID, fd.Time, fd.Notes, fd.ID)
	_, err = db.Exec(sqlstr, fd.RecipeID, fd.Time, fd.Notes, fd.ID)
	return err
}

// Save saves the FoodDiary to the database.
func (fd *FoodDiary) Save(db XODB) error {
	if fd.Exists() {
		return fd.Update(db)
	}

	return fd.Insert(db)
}

// Upsert performs an upsert for FoodDiary.
//
// NOTE: PostgreSQL 9.5+ only
func (fd *FoodDiary) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.food_diary (` +
		`id, recipe_id, time, notes` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, recipe_id, time, notes` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.recipe_id, EXCLUDED.time, EXCLUDED.notes` +
		`)`

	// run query
	XOLog(sqlstr, fd.ID, fd.RecipeID, fd.Time, fd.Notes)
	_, err = db.Exec(sqlstr, fd.ID, fd.RecipeID, fd.Time, fd.Notes)
	if err != nil {
		return err
	}

	// set existence
	fd._exists = true

	return nil
}

// Delete deletes the FoodDiary from the database.
func (fd *FoodDiary) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fd._exists {
		return nil
	}

	// if deleted, bail
	if fd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.food_diary WHERE id = $1`

	// run query
	XOLog(sqlstr, fd.ID)
	_, err = db.Exec(sqlstr, fd.ID)
	if err != nil {
		return err
	}

	// set deleted
	fd._deleted = true

	return nil
}

// FoodRecipe returns the FoodRecipe associated with the FoodDiary's RecipeID (recipe_id).
//
// Generated from foreign key 'food_diary_recipe_id_fkey'.
func (fd *FoodDiary) FoodRecipe(db XODB) (*FoodRecipe, error) {
	return FoodRecipeByID(db, int(fd.RecipeID.Int64))
}

// FoodDiaryByID retrieves a row from 'public.food_diary' as a FoodDiary.
//
// Generated from index 'food_diary_pkey'.
func FoodDiaryByID(db XODB, id int) (*FoodDiary, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, recipe_id, time, notes ` +
		`FROM public.food_diary ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	fd := FoodDiary{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fd.ID, &fd.RecipeID, &fd.Time, &fd.Notes)
	if err != nil {
		return nil, err
	}

	return &fd, nil
}
