// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// FoodRecipeItem represents a row from 'public.food_recipe_item'.
type FoodRecipeItem struct {
	ID             int            `json:"id"`              // id
	RecipeID       int            `json:"recipe_id"`       // recipe_id
	ItemID         int            `json:"item_id"`         // item_id
	AmountKilogram float64        `json:"amount_kilogram"` // amount_kilogram
	Notes          sql.NullString `json:"notes"`           // notes

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FoodRecipeItem exists in the database.
func (fri *FoodRecipeItem) Exists() bool {
	return fri._exists
}

// Deleted provides information if the FoodRecipeItem has been deleted from the database.
func (fri *FoodRecipeItem) Deleted() bool {
	return fri._deleted
}

// Insert inserts the FoodRecipeItem to the database.
func (fri *FoodRecipeItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fri._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.food_recipe_item (` +
		`recipe_id, item_id, amount_kilogram, notes` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes)
	err = db.QueryRow(sqlstr, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes).Scan(&fri.ID)
	if err != nil {
		return err
	}

	// set existence
	fri._exists = true

	return nil
}

// Update updates the FoodRecipeItem in the database.
func (fri *FoodRecipeItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fri._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fri._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.food_recipe_item SET (` +
		`recipe_id, item_id, amount_kilogram, notes` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes, fri.ID)
	_, err = db.Exec(sqlstr, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes, fri.ID)
	return err
}

// Save saves the FoodRecipeItem to the database.
func (fri *FoodRecipeItem) Save(db XODB) error {
	if fri.Exists() {
		return fri.Update(db)
	}

	return fri.Insert(db)
}

// Upsert performs an upsert for FoodRecipeItem.
//
// NOTE: PostgreSQL 9.5+ only
func (fri *FoodRecipeItem) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fri._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.food_recipe_item (` +
		`id, recipe_id, item_id, amount_kilogram, notes` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, recipe_id, item_id, amount_kilogram, notes` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.recipe_id, EXCLUDED.item_id, EXCLUDED.amount_kilogram, EXCLUDED.notes` +
		`)`

	// run query
	XOLog(sqlstr, fri.ID, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes)
	_, err = db.Exec(sqlstr, fri.ID, fri.RecipeID, fri.ItemID, fri.AmountKilogram, fri.Notes)
	if err != nil {
		return err
	}

	// set existence
	fri._exists = true

	return nil
}

// Delete deletes the FoodRecipeItem from the database.
func (fri *FoodRecipeItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fri._exists {
		return nil
	}

	// if deleted, bail
	if fri._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.food_recipe_item WHERE id = $1`

	// run query
	XOLog(sqlstr, fri.ID)
	_, err = db.Exec(sqlstr, fri.ID)
	if err != nil {
		return err
	}

	// set deleted
	fri._deleted = true

	return nil
}

// Item returns the Item associated with the FoodRecipeItem's ItemID (item_id).
//
// Generated from foreign key 'food_recipe_item_item_id_fkey'.
func (fri *FoodRecipeItem) Item(db XODB) (*Item, error) {
	return ItemByID(db, fri.ItemID)
}

// FoodRecipe returns the FoodRecipe associated with the FoodRecipeItem's RecipeID (recipe_id).
//
// Generated from foreign key 'food_recipe_item_recipe_id_fkey'.
func (fri *FoodRecipeItem) FoodRecipe(db XODB) (*FoodRecipe, error) {
	return FoodRecipeByID(db, fri.RecipeID)
}

// FoodRecipeItemByID retrieves a row from 'public.food_recipe_item' as a FoodRecipeItem.
//
// Generated from index 'food_recipe_item_pkey'.
func FoodRecipeItemByID(db XODB, id int) (*FoodRecipeItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, recipe_id, item_id, amount_kilogram, notes ` +
		`FROM public.food_recipe_item ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	fri := FoodRecipeItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fri.ID, &fri.RecipeID, &fri.ItemID, &fri.AmountKilogram, &fri.Notes)
	if err != nil {
		return nil, err
	}

	return &fri, nil
}
