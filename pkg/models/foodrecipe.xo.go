// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// FoodRecipe represents a row from 'public.food_recipes'.
type FoodRecipe struct {
	ID       int            `json:"id"`        // id
	Name     string         `json:"name"`      // name
	GroupID  sql.NullInt64  `json:"group_id"`  // group_id
	MealType string         `json:"meal_type"` // meal_type
	Notes    sql.NullString `json:"notes"`     // notes

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FoodRecipe exists in the database.
func (fr *FoodRecipe) Exists() bool {
	return fr._exists
}

// Deleted provides information if the FoodRecipe has been deleted from the database.
func (fr *FoodRecipe) Deleted() bool {
	return fr._deleted
}

// Insert inserts the FoodRecipe to the database.
func (fr *FoodRecipe) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.food_recipes (` +
		`name, group_id, meal_type, notes` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fr.Name, fr.GroupID, fr.MealType, fr.Notes)
	err = db.QueryRow(sqlstr, fr.Name, fr.GroupID, fr.MealType, fr.Notes).Scan(&fr.ID)
	if err != nil {
		return err
	}

	// set existence
	fr._exists = true

	return nil
}

// Update updates the FoodRecipe in the database.
func (fr *FoodRecipe) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.food_recipes SET (` +
		`name, group_id, meal_type, notes` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, fr.Name, fr.GroupID, fr.MealType, fr.Notes, fr.ID)
	_, err = db.Exec(sqlstr, fr.Name, fr.GroupID, fr.MealType, fr.Notes, fr.ID)
	return err
}

// Save saves the FoodRecipe to the database.
func (fr *FoodRecipe) Save(db XODB) error {
	if fr.Exists() {
		return fr.Update(db)
	}

	return fr.Insert(db)
}

// Upsert performs an upsert for FoodRecipe.
//
// NOTE: PostgreSQL 9.5+ only
func (fr *FoodRecipe) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.food_recipes (` +
		`id, name, group_id, meal_type, notes` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, group_id, meal_type, notes` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.group_id, EXCLUDED.meal_type, EXCLUDED.notes` +
		`)`

	// run query
	XOLog(sqlstr, fr.ID, fr.Name, fr.GroupID, fr.MealType, fr.Notes)
	_, err = db.Exec(sqlstr, fr.ID, fr.Name, fr.GroupID, fr.MealType, fr.Notes)
	if err != nil {
		return err
	}

	// set existence
	fr._exists = true

	return nil
}

// Delete deletes the FoodRecipe from the database.
func (fr *FoodRecipe) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fr._exists {
		return nil
	}

	// if deleted, bail
	if fr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.food_recipes WHERE id = $1`

	// run query
	XOLog(sqlstr, fr.ID)
	_, err = db.Exec(sqlstr, fr.ID)
	if err != nil {
		return err
	}

	// set deleted
	fr._deleted = true

	return nil
}

// FoodRecipeByID retrieves a row from 'public.food_recipes' as a FoodRecipe.
//
// Generated from index 'food_recipes_pkey'.
func FoodRecipeByID(db XODB, id int) (*FoodRecipe, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, group_id, meal_type, notes ` +
		`FROM public.food_recipes ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	fr := FoodRecipe{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fr.ID, &fr.Name, &fr.GroupID, &fr.MealType, &fr.Notes)
	if err != nil {
		return nil, err
	}

	return &fr, nil
}
