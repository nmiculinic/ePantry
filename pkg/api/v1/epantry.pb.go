// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epantry.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type APIVersion struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIVersion) Reset()         { *m = APIVersion{} }
func (m *APIVersion) String() string { return proto.CompactTextString(m) }
func (*APIVersion) ProtoMessage()    {}
func (*APIVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b5b807365439d5, []int{0}
}

func (m *APIVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIVersion.Unmarshal(m, b)
}
func (m *APIVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIVersion.Marshal(b, m, deterministic)
}
func (m *APIVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIVersion.Merge(m, src)
}
func (m *APIVersion) XXX_Size() int {
	return xxx_messageInfo_APIVersion.Size(m)
}
func (m *APIVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_APIVersion.DiscardUnknown(m)
}

var xxx_messageInfo_APIVersion proto.InternalMessageInfo

func (m *APIVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*APIVersion)(nil), "api.v1.epantry.APIVersion")
}

func init() {
	proto.RegisterFile("epantry.proto", fileDescriptor_96b5b807365439d5)
}

var fileDescriptor_96b5b807365439d5 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2d, 0x48, 0xcc,
	0x2b, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b,
	0x33, 0xd4, 0x83, 0x8a, 0x4a, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x65, 0x93,
	0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0xa0, 0x8a, 0x95, 0xd4, 0xb8, 0xb8, 0x1c, 0x03, 0x3c,
	0xc3, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x84, 0x24, 0xb8, 0xd8, 0xcb, 0x20, 0x4c, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0xd7, 0xc8, 0x83, 0x8b, 0x3d, 0x35, 0x00, 0x6c, 0x9e, 0x90,
	0x2d, 0x17, 0x3b, 0x4c, 0xbd, 0x98, 0x1e, 0xc4, 0x6c, 0x3d, 0x98, 0xd9, 0x7a, 0xae, 0x20, 0xb3,
	0xa5, 0xa4, 0xf4, 0x50, 0xdd, 0xa0, 0x87, 0xb0, 0xc3, 0x89, 0x25, 0x8a, 0xa9, 0xcc, 0x30, 0x89,
	0x0d, 0xac, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x58, 0x4e, 0x63, 0xbc, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EPantryClient is the client API for EPantry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EPantryClient interface {
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIVersion, error)
}

type ePantryClient struct {
	cc grpc.ClientConnInterface
}

func NewEPantryClient(cc grpc.ClientConnInterface) EPantryClient {
	return &ePantryClient{cc}
}

func (c *ePantryClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIVersion, error) {
	out := new(APIVersion)
	err := c.cc.Invoke(ctx, "/api.v1.epantry.ePantry/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EPantryServer is the server API for EPantry service.
type EPantryServer interface {
	Version(context.Context, *empty.Empty) (*APIVersion, error)
}

// UnimplementedEPantryServer can be embedded to have forward compatible implementations.
type UnimplementedEPantryServer struct {
}

func (*UnimplementedEPantryServer) Version(ctx context.Context, req *empty.Empty) (*APIVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterEPantryServer(s *grpc.Server, srv EPantryServer) {
	s.RegisterService(&_EPantry_serviceDesc, srv)
}

func _EPantry_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPantryServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.epantry.ePantry/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPantryServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EPantry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.epantry.ePantry",
	HandlerType: (*EPantryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _EPantry_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "epantry.proto",
}
